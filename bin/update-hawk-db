#!/usr/bin/env node

"use strict";

var async = require("async");
var mongoose = require("mongoose");
var argv = require("yargs")
    .default("stop", true)
    .argv;

// Config
var logger = require("../config/logger");
var AWSConfig = require("../config/aws");
var mongoConfig = require("../config/mongo");

// Models
var Artist = require("../models/Artist");
var Release = require("../models/Release");

// Services
var EC2Service = require("../services/EC2Service");
var SNSService = require("../services/EC2Service");
var MusicBrainzService = require("../services/MusicBrainzService");

/**
 * Fetch the releases for an artist from the MusicBrainz database, then update the Hawk database with any new releases.
 */
var updateArtist = function(artist, callback) {
  var artistModel = new Artist(artist);

  MusicBrainzService.getReleasesForArtist(artist._id, function(err, releases) {
    var releaseModels = releases.map(function(release) {
      return new Release(release);
    });

    artist.releases = releases;
    artistModel.releases = releaseModels;
    Artist.update({ _id: artist._id }, artist, { upsert: true }, function(err) {
      if (err) {
        logger.error("Failed to save artist and releases", err);
        callback(err);
      } else {
        logger.info("Saved artist " + artist.name + " with " + releases.length + " releases");
        callback(null);
      }
    });
  });
};

/**
 * Fetch the artists from the MusicBrainz database then update teh release for each one.
 */
var updateHawkDB = function(callback) {
  logger.info("Updating Hawk database");

  mongoose.connect(mongoConfig.uri, mongoConfig.options);

  async.waterfall([
    function(callback) {
      MusicBrainzService.getArtists(callback);
    },
    function(artists, callback) {
      logger.info("Found %d artists in MusicBrainz database", artists.length);

      async.each(artists, updateArtist, function(err) {
        if (err) {
          logger.error("Failed to update all artists", err);
          callback(err);
        } else {
          logger.info("Successfully updated all artists");
          callback(null);
        }
      });
    },
    function(callback) {
      // Send an SNS notification with some stats about the update e.g. how many new artists/releases
      SNSService.sendDatabaseUpdateMessage("Finished Updating Hawk DB", "TODO: Report update stats", callback);
    }
  ], function (err) {
    if (err) {
      callback(err);
    } else {
      logger.info("Finished updating Hawk database");
      callback(null);
    }
  });
};

/**
 * Business time.
 */

async.series({
  startMusicBrainz: function(callback) {
    EC2Service.startInstance(AWSConfig.EC2.musicBrainz.instanceId, callback);
  },
  waitUntilMusicBrainzRunning: function(callback) {
    EC2Service.waitForInstanceStatus(AWSConfig.EC2.musicBrainz.instanceId, "instanceRunning", callback);
  },
  createMusicBrainzDB: function(callback) {
    MusicBrainzService.createDatabase(callback);
  },
  updateHawkDB: function(callback) {
    updateHawkDB(callback);
  },
  stopMusicBrainz: function(callback) {
    if (argv.stop) {
      EC2Service.stopInstance(AWSConfig.EC2.musicBrainz.instanceId, callback);
    } else {
      logger.info("Skipping stop MusicBrainz database");
      callback(null);
    }
  },
  waitUntilMusicBrainzStopped: function(callback) {
    if (argv.stop) {
      EC2Service.waitForInstanceStatus(AWSConfig.EC2.musicBrainz.instanceId, "instanceStopped", callback);
    } else {
      logger.info("Skipping waiting for MusicBrainz database to stop");
      callback(null);
    }
  }
}, function (err) {
  if (err) {
    logger.error(err);
    process.exit(1);
  } else {
    process.exit(0);
  }
});
